import groovy.json.JsonBuilder

plugins {
    id 'fabric-loom'
    id 'com.replaymod.preprocess'
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.archives_base_name + "-" + project.minecraft_version
}

repositories {
    maven { url = 'https://maven.shedaniel.me' }
    maven { url = 'https://maven.terraformersmc.com' }
    maven { url = 'https://maven.nucleoid.xyz' }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    modImplementation "me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}"
    modImplementation "com.terraformersmc:modmenu:${project.modmenu_version}"

    implementation(project(':common')) {
        exclude module: 'junixsocket-core'
        exclude module: 'slf4j-api'
    }

    runtimeOnly project(':fabricWrapper')
}

String dependencyString = project.minecraft_dependency
if (dependencyString.contains(",")) {
    List<?> processedDependency = Arrays.stream(dependencyString.split(','))
            .map { it.trim() }
            .toList()

    dependencyString = new JsonBuilder(processedDependency)
} else {
    dependencyString = "\"${dependencyString}\""
}

Map<String, ?> properties = [
        "version"             : project.version,
        "minecraft_version"   : project.minecraft_version,
        "minecraft_version_id": project.minecraft_version.replace(".", "-"),
        "minecraft_dependency": dependencyString
]

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset = "UTF-8"

    filesMatching("fabric.mod.json") {
        expand(properties)
    }
}

def targetJavaVersion = Integer.parseInt(project.java_version)
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 && JavaVersion.current().isJava10Compatible()) {
        it.options.release.set(targetJavaVersion)
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.setLanguageVersion(JavaLanguageVersion.of(targetJavaVersion))
    }

    // withSourcesJar()
}

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}
