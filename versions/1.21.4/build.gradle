import groovy.json.JsonBuilder

plugins {
    id 'fabric-loom'
    id 'com.replaymod.preprocess'
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.archives_base_name + "-" + project.minecraft_version
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    runtimeOnly project(':fabricWrapper')
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset = "UTF-8"

    String dependencyString = project.minecraft_dependency
    if (dependencyString.contains(",")) {
        List<?> processedDependency = Arrays.stream(dependencyString.split(','))
                .map { it.trim() }
                .toList()

        dependencyString = new JsonBuilder(processedDependency)
    } else {
        dependencyString = "\"${dependencyString}\""
    }

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "minecraft_version_id": project.minecraft_version.replace(".", "-"),
                "minecraft_dependency": dependencyString
    }
}

def targetJavaVersion = Integer.parseInt(project.java_version)
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release.set(targetJavaVersion)
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }

    // withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}
